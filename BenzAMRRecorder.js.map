{
  "version": 3,
  "sources": [
    "node_modules/browser-pack/_prelude.js",
    "node_modules/recorderjs/recorder.js",
    "src\\BenzAMRRecorder.js",
    "src\\audioContext.js",
    "src\\index.js"
  ],
  "names": [],
  "mappings": "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",
  "file": "generated.js",
  "sourceRoot": "",
  "sourcesContent": [
    "(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})",
    "var WORKER_PATH = './recorderWorker.js';\n\nvar Recorder = function(source, cfg){\n  var config = cfg || {};\n  var bufferLen = config.bufferLen || 4096;\n  this.context = source.context;\n  this.node = (this.context.createScriptProcessor ||\n               this.context.createJavaScriptNode).call(this.context,\n                                                       bufferLen, 2, 2);\n  var worker = new Worker((window.URL || window.webkitURL).createObjectURL(new Blob(['(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module \\'\"+o+\"\\'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\\nvar recLength = 0,\\n  recBuffersL = [],\\n  recBuffersR = [],\\n  sampleRate;\\n\\n\\nself.onmessage = function(e) {\\n  switch(e.data.command){\\n    case \\'init\\':\\n      init(e.data.config);\\n      break;\\n    case \\'record\\':\\n      record(e.data.buffer);\\n      break;\\n    case \\'exportWAV\\':\\n      exportWAV(e.data.type);\\n      break;\\n    case \\'getBuffer\\':\\n      getBuffer();\\n      break;\\n    case \\'clear\\':\\n      clear();\\n      break;\\n  }\\n};\\n\\nfunction init(config){\\n  sampleRate = config.sampleRate;\\n}\\n\\nfunction record(inputBuffer){\\n  recBuffersL.push(inputBuffer[0]);\\n  recBuffersR.push(inputBuffer[1]);\\n  recLength += inputBuffer[0].length;\\n}\\n\\nfunction exportWAV(type){\\n  var bufferL = mergeBuffers(recBuffersL, recLength);\\n  var bufferR = mergeBuffers(recBuffersR, recLength);\\n  var interleaved = interleave(bufferL, bufferR);\\n  var dataview = encodeWAV(interleaved);\\n  var audioBlob = new Blob([dataview], { type: type });\\n\\n  self.postMessage(audioBlob);\\n}\\n\\nfunction getBuffer() {\\n  var buffers = [];\\n  buffers.push( mergeBuffers(recBuffersL, recLength) );\\n  buffers.push( mergeBuffers(recBuffersR, recLength) );\\n  self.postMessage(buffers);\\n}\\n\\nfunction clear(){\\n  recLength = 0;\\n  recBuffersL = [];\\n  recBuffersR = [];\\n}\\n\\nfunction mergeBuffers(recBuffers, recLength){\\n  var result = new Float32Array(recLength);\\n  var offset = 0;\\n  for (var i = 0; i < recBuffers.length; i++){\\n    result.set(recBuffers[i], offset);\\n    offset += recBuffers[i].length;\\n  }\\n  return result;\\n}\\n\\nfunction interleave(inputL, inputR){\\n  var length = inputL.length + inputR.length;\\n  var result = new Float32Array(length);\\n\\n  var index = 0,\\n    inputIndex = 0;\\n\\n  while (index < length){\\n    result[index++] = inputL[inputIndex];\\n    result[index++] = inputR[inputIndex];\\n    inputIndex++;\\n  }\\n  return result;\\n}\\n\\nfunction floatTo16BitPCM(output, offset, input){\\n  for (var i = 0; i < input.length; i++, offset+=2){\\n    var s = Math.max(-1, Math.min(1, input[i]));\\n    output.setInt16(offset, s < 0 ? s * 0x8000 : s * 0x7FFF, true);\\n  }\\n}\\n\\nfunction writeString(view, offset, string){\\n  for (var i = 0; i < string.length; i++){\\n    view.setUint8(offset + i, string.charCodeAt(i));\\n  }\\n}\\n\\nfunction encodeWAV(samples){\\n  var buffer = new ArrayBuffer(44 + samples.length * 2);\\n  var view = new DataView(buffer);\\n\\n  /* RIFF identifier */\\n  writeString(view, 0, \\'RIFF\\');\\n  /* RIFF chunk length */\\n  view.setUint32(4, 36 + samples.length * 2, true);\\n  /* RIFF type */\\n  writeString(view, 8, \\'WAVE\\');\\n  /* format chunk identifier */\\n  writeString(view, 12, \\'fmt \\');\\n  /* format chunk length */\\n  view.setUint32(16, 16, true);\\n  /* sample format (raw) */\\n  view.setUint16(20, 1, true);\\n  /* channel count */\\n  view.setUint16(22, 2, true);\\n  /* sample rate */\\n  view.setUint32(24, sampleRate, true);\\n  /* byte rate (sample rate * block align) */\\n  view.setUint32(28, sampleRate * 4, true);\\n  /* block align (channel count * bytes per sample) */\\n  view.setUint16(32, 4, true);\\n  /* bits per sample */\\n  view.setUint16(34, 16, true);\\n  /* data chunk identifier */\\n  writeString(view, 36, \\'data\\');\\n  /* data chunk length */\\n  view.setUint32(40, samples.length * 2, true);\\n\\n  floatTo16BitPCM(view, 44, samples);\\n\\n  return view;\\n}\\n\\n},{}]},{},[1]);\\n'],{type:\"text/javascript\"})));\n  worker.onmessage = function(e){\n    var blob = e.data;\n    currCallback(blob);\n  }\n\n  worker.postMessage({\n    command: 'init',\n    config: {\n      sampleRate: this.context.sampleRate\n    }\n  });\n  var recording = false,\n    currCallback;\n\n  this.node.onaudioprocess = function(e){\n    if (!recording) return;\n    worker.postMessage({\n      command: 'record',\n      buffer: [\n        e.inputBuffer.getChannelData(0),\n        e.inputBuffer.getChannelData(1)\n      ]\n    });\n  }\n\n  this.configure = function(cfg){\n    for (var prop in cfg){\n      if (cfg.hasOwnProperty(prop)){\n        config[prop] = cfg[prop];\n      }\n    }\n  }\n\n  this.record = function(){\n    recording = true;\n  }\n\n  this.stop = function(){\n    recording = false;\n  }\n\n  this.clear = function(){\n    worker.postMessage({ command: 'clear' });\n  }\n\n  this.getBuffer = function(cb) {\n    currCallback = cb || config.callback;\n    worker.postMessage({ command: 'getBuffer' })\n  }\n\n  this.exportWAV = function(cb, type){\n    currCallback = cb || config.callback;\n    type = type || config.type || 'audio/wav';\n    if (!currCallback) throw new Error('Callback not set');\n    worker.postMessage({\n      command: 'exportWAV',\n      type: type\n    });\n  }\n\n  source.connect(this.node);\n  this.node.connect(this.context.destination);    //this should not be necessary\n};\n\nRecorder.forceDownload = function(blob, filename){\n  var url = (window.URL || window.webkitURL).createObjectURL(blob);\n  var link = window.document.createElement('a');\n  link.href = url;\n  link.download = filename || 'output.wav';\n  var click = document.createEvent(\"Event\");\n  click.initEvent(\"click\", true, true);\n  link.dispatchEvent(click);\n}\n\nmodule.exports = Recorder;\n",
    "/**\r\n * @file AMR 录音、转换、播放器\r\n * @author BenzLeung(https://github.com/BenzLeung)\r\n * @date 2017/11/12\r\n * Created by JetBrains PhpStorm.\r\n *\r\n * 每位工程师都有保持代码优雅的义务\r\n * each engineer has a duty to keep the code elegant\r\n */\r\n\r\nimport {\r\n    decodeAudioArrayBufferByContext,\r\n    generateRecordSamples,\r\n    getCtxSampleRate,\r\n    initRecorder,\r\n    isRecording,\r\n    playPcm,\r\n    startRecord,\r\n    stopPcm,\r\n    stopRecord\r\n} from \"./audioContext\";\r\n\r\nconst WORKER_PATH = './amrWorker.min.js';\r\n\r\nexport default class BenzAMRRecorder {\r\n\r\n    _isInit = false;\r\n\r\n    _isInitRecorder = false;\r\n\r\n    _samples = new Float32Array(0);\r\n\r\n    _rawData = new Uint8Array(0);\r\n\r\n    _blob = null;\r\n\r\n    _onEnded = null;\r\n\r\n    _onPlay = null;\r\n\r\n    _onStop = null;\r\n\r\n    _onStartRecord = null;\r\n\r\n    _onCancelRecord = null;\r\n\r\n    _onFinishRecord = null;\r\n\r\n    _isPlaying = false;\r\n    \r\n    _amrWorker;\r\n    \r\n    _amrResolves = {};\r\n    \r\n    _amrSeq = 1;\r\n    \r\n    constructor() {\r\n        this._amrWorker = new Worker(WORKER_PATH);\r\n        this._amrWorker.onmessage = (e) => {\r\n            this._amrResolves[e.data.seq + ''](e.data.amr);\r\n            delete this._amrResolves[e.data.seq + ''];\r\n        };\r\n    }\r\n\r\n    /**\r\n     * 是否已经初始化\r\n     * @return {boolean}\r\n     */\r\n    isInit() {\r\n        return this._isInit;\r\n    }\r\n\r\n    /**\r\n     * 使用浮点数据初始化\r\n     * @param {Float32Array} array\r\n     * @return {Promise}\r\n     */\r\n    initWithArrayBuffer(array) {\r\n        if (this._isInit || this._isInitRecorder) {\r\n            throw new Error('AMR has been initialized. For a new AMR, please generate a new BenzAMRRecorder().');\r\n        }\r\n        return new Promise((resolve, reject) => {\r\n            let u8Array = new Uint8Array(array);\r\n            this.decodeAMRAsync(u8Array).then((samples) => {\r\n                this._samples = samples;\r\n                this._isInit = true;\r\n\r\n                if (!this._samples) {\r\n                    decodeAudioArrayBufferByContext(array).then((data) => {\r\n                        this._isInit = true;\r\n                        return this.encodeAMRAsync(new Float32Array(data), getCtxSampleRate());\r\n                    }).then((ramData) => {\r\n                        this._rawData = ramData;\r\n                        return this.decodeAMRAsync(ramData);\r\n                    }).then((sample) => {\r\n                        this._samples = sample;\r\n                        this._blob = BenzAMRRecorder.rawAMRData2Blob(this._rawData);\r\n                        resolve();\r\n                    }).catch(() => {\r\n                        reject(new Error('Failed to decode.'));\r\n                    });\r\n                } else {\r\n                    this._rawData = u8Array;\r\n                    resolve();\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * 使用 Blob 对象初始化（ <input type=\"file\">）\r\n     * @param {Blob} blob\r\n     * @return {Promise}\r\n     */\r\n    initWithBlob(blob) {\r\n        if (this._isInit || this._isInitRecorder) {\r\n            throw new Error('AMR has been initialized. For a new AMR, please generate a new BenzAMRRecorder().');\r\n        }\r\n        this._blob = blob;\r\n        const p = new Promise((resolve) => {\r\n            let reader = new FileReader();\r\n            reader.onload = function(e) {\r\n                resolve(e.target.result);\r\n            };\r\n            reader.readAsArrayBuffer(blob);\r\n        });\r\n        return p.then((data) => {\r\n            return this.initWithArrayBuffer(data);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * 使用 url 初始化\r\n     * @param {string} url\r\n     * @return {Promise}\r\n     */\r\n    initWithUrl(url) {\r\n        if (this._isInit || this._isInitRecorder) {\r\n            throw new Error('AMR has been initialized. For a new AMR, please generate a new BenzAMRRecorder().');\r\n        }\r\n        // 先播放一个空音频，\r\n        // 因为有些环境（如iOS）播放首个音频时禁止自动、异步播放，\r\n        // 播放空音频防止加载后立即播放的功能失效。\r\n        // 但即使如此，initWithUrl 仍然须放入一个用户事件中\r\n        playPcm(new Float32Array(10), 24000);\r\n\r\n        const p = new Promise((resolve, reject) => {\r\n            let xhr = new XMLHttpRequest();\r\n            xhr.open('GET', url, true);\r\n            xhr.responseType = 'arraybuffer';\r\n            xhr.onload = function() {\r\n                resolve(this.response);\r\n            };\r\n            xhr.onerror = function() {\r\n                reject(new Error('Failed to fetch ' + url));\r\n            };\r\n            xhr.send();\r\n        });\r\n        return p.then((array) => {\r\n            return this.initWithArrayBuffer(array);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * 初始化录音\r\n     * @return {Promise}\r\n     */\r\n    initWithRecord() {\r\n        if (this._isInit || this._isInitRecorder) {\r\n            throw new Error('AMR has been initialized. For a new AMR, please generate a new BenzAMRRecorder().');\r\n        }\r\n        return new Promise((resolve, reject) => {\r\n            initRecorder().then(() => {\r\n                this._isInitRecorder = true;\r\n                resolve();\r\n            }).catch((e) => {\r\n                reject(e);\r\n            });\r\n        });\r\n    }\r\n\r\n    on(action, fn) {\r\n        if (typeof fn === 'function') {\r\n            switch (action) {\r\n                case 'play':\r\n                    this._onPlay = fn;\r\n                    break;\r\n                case 'stop':\r\n                    this._onStop = fn;\r\n                    break;\r\n                case 'ended':\r\n                    this._onEnded = fn;\r\n                    break;\r\n                case 'startRecord':\r\n                    this._onStartRecord = fn;\r\n                    break;\r\n                case 'cancelRecord':\r\n                    this._onCancelRecord = fn;\r\n                    break;\r\n                case 'finishRecord':\r\n                    this._onFinishRecord = fn;\r\n                    break;\r\n                default:\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 播放事件\r\n     * @param {Function} fn\r\n     */\r\n    onPlay(fn) {\r\n        this.on('play', fn);\r\n    }\r\n\r\n    /**\r\n     * 停止事件（包括播放结束）\r\n     * @param {Function} fn\r\n     */\r\n    onStop(fn) {\r\n        this.on('stop', fn);\r\n    }\r\n\r\n    /**\r\n     * 播放结束事件\r\n     * @param {Function} fn\r\n     */\r\n    onEnded(fn) {\r\n        this.on('ended', fn);\r\n    }\r\n\r\n    /**\r\n     * 开始录音事件\r\n     * @param {Function} fn\r\n     */\r\n    onStartRecord(fn) {\r\n        this.on('startRecord', fn);\r\n    }\r\n\r\n    /**\r\n     * 结束录音事件\r\n     * @param {Function} fn\r\n     */\r\n    onFinishRecord(fn) {\r\n        this.on('finishRecord', fn);\r\n    }\r\n\r\n    /**\r\n     * 放弃录音事件\r\n     * @param {Function} fn\r\n     */\r\n    onCancelRecord(fn) {\r\n        this.on('cancelRecord', fn);\r\n    }\r\n\r\n    _onEndCallback() {\r\n        this._isPlaying = false;\r\n        if (this._onStop) {\r\n            this._onStop();\r\n        }\r\n        if (this._onEnded) {\r\n            this._onEnded();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 播放\r\n     */\r\n    play() {\r\n        if (!this._isInit) {\r\n            throw new Error('Please init AMR first.');\r\n        }\r\n        if (this._onPlay) {\r\n            this._onPlay();\r\n        }\r\n        this._isPlaying = true;\r\n        playPcm(this._samples, this._isInitRecorder ? getCtxSampleRate() : 8000, this._onEndCallback.bind(this));\r\n    }\r\n\r\n    /**\r\n     * 停止\r\n     */\r\n    stop() {\r\n        stopPcm();\r\n        this._isPlaying = false;\r\n        if (this._onStop) {\r\n            this._onStop();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 是否正在播放\r\n     * @return {boolean}\r\n     */\r\n    isPlaying() {\r\n        return this._isPlaying;\r\n    }\r\n\r\n    /**\r\n     * 开始录音\r\n     */\r\n    startRecord() {\r\n        startRecord();\r\n        if (this._onStartRecord) {\r\n            this._onStartRecord();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 结束录音，并把录制的音频转换成 AMR\r\n     * @return {Promise}\r\n     */\r\n    finishRecord() {\r\n        return new Promise((resolve) => {\r\n            stopRecord();\r\n            generateRecordSamples().then((samples) => {\r\n                this._samples = samples;\r\n                return this.encodeAMRAsync(samples, getCtxSampleRate());\r\n            }).then((rawData) => {\r\n                this._rawData = rawData;\r\n                this._blob = BenzAMRRecorder.rawAMRData2Blob(this._rawData);\r\n                this._isInit = true;\r\n                if (this._onFinishRecord) {\r\n                    this._onFinishRecord();\r\n                }\r\n                resolve();\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * 放弃录音\r\n     */\r\n    cancelRecord() {\r\n        stopRecord();\r\n        if (this._onCancelRecord) {\r\n            this._onCancelRecord();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 是否正在录音\r\n     * @return {boolean}\r\n     */\r\n    isRecording() {\r\n        return isRecording();\r\n    }\r\n\r\n    /**\r\n     * 获取音频的时间长度（单位：秒）\r\n     * @return {Number}\r\n     */\r\n    getDuration() {\r\n        let rate = this._isInitRecorder ? getCtxSampleRate() : 8000;\r\n        return this._samples.length / rate;\r\n    }\r\n\r\n    getBlob() {\r\n        return this._blob;\r\n    }\r\n\r\n    /*\r\n    static encodeAMR(samples, sampleRate) {\r\n        sampleRate = sampleRate || 8000;\r\n        return AMR.encode(samples, sampleRate, 7);\r\n    }\r\n    */\r\n\r\n    encodeAMRAsync(samples, sampleRate) {\r\n        return new Promise(resolve => {\r\n            this._amrSeq ++;\r\n            this._amrResolves[this._amrSeq + ''] = resolve;\r\n            this._amrWorker.postMessage({\r\n                command: 'encode',\r\n                samples: samples,\r\n                sampleRate: sampleRate,\r\n                seq: this._amrSeq\r\n            });\r\n        });\r\n    }\r\n    \r\n    decodeAMRAsync(u8Array) {\r\n        return new Promise(resolve => {\r\n            this._amrSeq ++;\r\n            this._amrResolves[this._amrSeq + ''] = resolve;\r\n            this._amrWorker.postMessage({\r\n                command: 'decode',\r\n                buffer: u8Array,\r\n                seq: this._amrSeq\r\n            });\r\n        })\r\n    }\r\n\r\n    static rawAMRData2Blob(data) {\r\n        return new Blob([data.buffer], {type: 'audio/amr'});\r\n    }\r\n}\r\n",
    "/**\r\n * @file 公共的 Web Audio API Context\r\n * @author BenzLeung(https://github.com/BenzLeung)\r\n * @date 2017/11/12\r\n * Created by JetBrains PhpStorm.\r\n *\r\n * 每位工程师都有保持代码优雅的义务\r\n * each engineer has a duty to keep the code elegant\r\n */\r\n\r\nimport Recorder from 'recorderjs';\r\n\r\nconst AudioContext = window.AudioContext || window.webkitAudioContext || window.mozAudioContext;\r\n\r\nlet ctx = null;\r\nlet curSourceNode = null;\r\n\r\nif (AudioContext) {\r\n    ctx = new AudioContext();\r\n} else {\r\n    throw 'Web Audio API is Unsupported.'\r\n}\r\n/*\r\nconst increaseSampleRate = function (samples, multiple) {\r\n    let sampleLen = samples.length;\r\n    let newSamples = new Float32Array(sampleLen * multiple);\r\n    for (let i = 0; i < sampleLen; i ++) {\r\n        for (let j = 0; j < multiple; j ++) {\r\n            newSamples[i * multiple + j] = samples[i];\r\n        }\r\n    }\r\n    return newSamples;\r\n};\r\n*/\r\n\r\nexport const playPcm = function (samples, sampleRate, onEnded) {\r\n    sampleRate = sampleRate || 8000;\r\n    stopPcm();\r\n    curSourceNode = ctx['createBufferSource']();\r\n    let _samples = samples;\r\n    let buffer, channelBuffer;\r\n    try {\r\n        buffer = ctx['createBuffer'](1, samples.length, sampleRate);\r\n    } catch (e) {\r\n        // iOS 不支持 22050 以下的采样率，于是先提升采样率，然后用慢速播放\r\n        if (sampleRate < 11025) {\r\n            /*buffer = ctx['createBuffer'](1, samples.length * 3, sampleRate * 3);\r\n            _samples = increaseSampleRate(samples, 3);*/\r\n            buffer = ctx['createBuffer'](1, samples.length, sampleRate * 4);\r\n            curSourceNode['playbackRate'].value = 0.25;\r\n        } else {\r\n            /*buffer = ctx['createBuffer'](1, samples.length * 2, sampleRate * 2);\r\n            _samples = increaseSampleRate(samples, 2);*/\r\n            buffer = ctx['createBuffer'](1, samples.length, sampleRate * 2);\r\n            curSourceNode['playbackRate'].value = 0.5;\r\n        }\r\n    }\r\n    if (buffer['copyToChannel']) {\r\n        buffer['copyToChannel'](_samples, 0, 0)\r\n    } else {\r\n        channelBuffer = buffer['getChannelData'](0);\r\n        channelBuffer.set(_samples);\r\n    }\r\n    curSourceNode['buffer'] = buffer;\r\n    curSourceNode['loop'] = false;\r\n    curSourceNode['connect'](ctx['destination']);\r\n    curSourceNode.onended = onEnded;\r\n    curSourceNode.start();\r\n};\r\n\r\nexport const stopPcm = function () {\r\n    if (curSourceNode) {\r\n        curSourceNode.stop();\r\n        curSourceNode = null;\r\n    }\r\n};\r\n\r\nlet recorderStream = null;\r\nlet recorder = null;\r\nlet recording = false;\r\n\r\nexport const initRecorder = function () {\r\n    return new Promise((resolve, reject) => {\r\n        let s = (stream) => {\r\n            recorderStream = ctx['createMediaStreamSource'](stream);\r\n            recorder = new Recorder(recorderStream);\r\n            recording = false;\r\n            resolve();\r\n        };\r\n        let j = (e) => {\r\n            reject(e);\r\n        };\r\n        if (!recorder) {\r\n            if (window.navigator.mediaDevices.getUserMedia) {\r\n                window.navigator.mediaDevices.getUserMedia({audio: true}).then(s).catch(j);\r\n            } else if (window.navigator.getUserMedia) {\r\n                window.navigator.getUserMedia({audio: true}, s, j);\r\n            } else {\r\n                j();\r\n            }\r\n        } else {\r\n            resolve();\r\n        }\r\n    });\r\n};\r\n\r\nexport const isRecording = function () {\r\n    return recorder && recording;\r\n};\r\n\r\nexport const startRecord = function () {\r\n    if (recorder) {\r\n        recorder.clear();\r\n        recorder.record();\r\n        recording = true;\r\n    }\r\n};\r\n\r\nexport const stopRecord = function () {\r\n    if (recorder) {\r\n        recorder.stop();\r\n        recording = false;\r\n    }\r\n};\r\n\r\nexport const getCtxSampleRate = function () {\r\n    return ctx.sampleRate;\r\n};\r\n\r\nexport const generateRecordSamples = function () {\r\n    return new Promise((resolve) => {\r\n        if (recorder) {\r\n            recorder.getBuffer((buffers) => {\r\n                resolve(buffers[0]);\r\n            });\r\n        }\r\n    });\r\n};\r\n\r\nexport const decodeAudioArrayBufferByContext = function (array) {\r\n    return new Promise((resolve, reject) => {\r\n        ctx['decodeAudioData'](array, resolve, reject);\r\n    });\r\n};\r\n",
    "/**\r\n * @file Browserify 入口\r\n * @author BenzLeung(https://github.com/BenzLeung)\r\n * @date 2017/12/10\r\n * Created by JetBrains PhpStorm.\r\n *\r\n * 每位工程师都有保持代码优雅的义务\r\n * each engineer has a duty to keep the code elegant\r\n */\r\n\r\nmodule.exports = require('./BenzAMRRecorder.js').default;"
  ]
}